
stm32f407xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005ac  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000754  0800075c  0001075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000754  08000754  0001075c  2**0
                  CONTENTS
  4 .ARM          00000000  08000754  08000754  0001075c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000754  0800075c  0001075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000754  08000754  00010754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000758  08000758  00010758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001075c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001075c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000098f  00000000  00000000  0001078c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000026a  00000000  00000000  0001111b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00011388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000a0  00000000  00000000  00011450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000014e5  00000000  00000000  000114f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c2e  00000000  00000000  000129d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004d0f  00000000  00000000  00013603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00018312  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000268  00000000  00000000  00018368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800073c 	.word	0x0800073c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800073c 	.word	0x0800073c

080001e8 <main>:
	for(int32_t i=0; i<500000; i++);
}
#define BTN_PRESSED  1

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed, GPIOBtn;

	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80001ee:	230c      	movs	r3, #12
 80001f0:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80001f2:	2301      	movs	r3, #1
 80001f4:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001f6:	2302      	movs	r3, #2
 80001f8:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001fa:	2300      	movs	r3, #0
 80001fc:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001fe:	2300      	movs	r3, #0
 8000200:	74fb      	strb	r3, [r7, #19]
	GpioLed.pGPIOx = GPIOD;
 8000202:	4b10      	ldr	r3, [pc, #64]	; (8000244 <main+0x5c>)
 8000204:	60fb      	str	r3, [r7, #12]

	GPIO_PeriClockControl(GPIOD, ENABLE);
 8000206:	2101      	movs	r1, #1
 8000208:	480e      	ldr	r0, [pc, #56]	; (8000244 <main+0x5c>)
 800020a:	f000 f857 	bl	80002bc <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 800020e:	f107 030c 	add.w	r3, r7, #12
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f87c 	bl	8000310 <GPIO_Init>
///////////////////////////////////////////////////////////////////////////////

	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000218:	2300      	movs	r3, #0
 800021a:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800021c:	2304      	movs	r3, #4
 800021e:	717b      	strb	r3, [r7, #5]
	//GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000220:	2300      	movs	r3, #0
 8000222:	71fb      	strb	r3, [r7, #7]
	GPIOBtn.pGPIOx = GPIOA;
 8000224:	4b08      	ldr	r3, [pc, #32]	; (8000248 <main+0x60>)
 8000226:	603b      	str	r3, [r7, #0]


	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000228:	2101      	movs	r1, #1
 800022a:	4807      	ldr	r0, [pc, #28]	; (8000248 <main+0x60>)
 800022c:	f000 f846 	bl	80002bc <GPIO_PeriClockControl>

	GPIO_Init(&GPIOBtn);
 8000230:	463b      	mov	r3, r7
 8000232:	4618      	mov	r0, r3
 8000234:	f000 f86c 	bl	8000310 <GPIO_Init>


	//IRQ configurations
	//GPIO_IRQITPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRIO15);
	GPIO_IRQITConfig(IRQ_NO_EXTI0, ENABLE);
 8000238:	2101      	movs	r1, #1
 800023a:	2006      	movs	r0, #6
 800023c:	f000 f9b4 	bl	80005a8 <GPIO_IRQITConfig>

	while(1);
 8000240:	e7fe      	b.n	8000240 <main+0x58>
 8000242:	bf00      	nop
 8000244:	40020c00 	.word	0x40020c00
 8000248:	40020000 	.word	0x40020000

0800024c <EXTI0_IRQHandler>:
    /* Loop forever */
	return 0;
}

void EXTI0_IRQHandler(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

	GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000250:	2000      	movs	r0, #0
 8000252:	f000 fa2f 	bl	80006b4 <GPIO_IRQHandling>

	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 8000256:	210c      	movs	r1, #12
 8000258:	4802      	ldr	r0, [pc, #8]	; (8000264 <EXTI0_IRQHandler+0x18>)
 800025a:	f000 f98f 	bl	800057c <GPIO_ToggleOutputPin>

}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40020c00 	.word	0x40020c00

08000268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000268:	480d      	ldr	r0, [pc, #52]	; (80002a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800026c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000272:	490d      	ldr	r1, [pc, #52]	; (80002a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000274:	4a0d      	ldr	r2, [pc, #52]	; (80002ac <LoopForever+0xe>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000278:	e002      	b.n	8000280 <LoopCopyDataInit>

0800027a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800027c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027e:	3304      	adds	r3, #4

08000280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000284:	d3f9      	bcc.n	800027a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000286:	4a0a      	ldr	r2, [pc, #40]	; (80002b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000288:	4c0a      	ldr	r4, [pc, #40]	; (80002b4 <LoopForever+0x16>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800028c:	e001      	b.n	8000292 <LoopFillZerobss>

0800028e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000290:	3204      	adds	r2, #4

08000292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000294:	d3fb      	bcc.n	800028e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000296:	f000 fa2d 	bl	80006f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029a:	f7ff ffa5 	bl	80001e8 <main>

0800029e <LoopForever>:

LoopForever:
    b LoopForever
 800029e:	e7fe      	b.n	800029e <LoopForever>
  ldr   r0, =_estack
 80002a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ac:	0800075c 	.word	0x0800075c
  ldr r2, =_sbss
 80002b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b4:	2000001c 	.word	0x2000001c

080002b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b8:	e7fe      	b.n	80002b8 <ADC_IRQHandler>
	...

080002bc <GPIO_PeriClockControl>:
 *
 * @Note				- none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENDi)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	460b      	mov	r3, r1
 80002c6:	70fb      	strb	r3, [r7, #3]
	if ( ENABLE == ENDi)
 80002c8:	78fb      	ldrb	r3, [r7, #3]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d114      	bne.n	80002f8 <GPIO_PeriClockControl+0x3c>
	{
		if ( GPIOA == pGPIOx)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a0c      	ldr	r2, [pc, #48]	; (8000304 <GPIO_PeriClockControl+0x48>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d106      	bne.n	80002e4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PLCK_EN();
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <GPIO_PeriClockControl+0x4c>)
 80002d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <GPIO_PeriClockControl+0x4c>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6313      	str	r3, [r2, #48]	; 0x30
			//GPIOA_PLCK_DI();
		}

	}

}
 80002e2:	e009      	b.n	80002f8 <GPIO_PeriClockControl+0x3c>
		else if (GPIOD == pGPIOx)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4a09      	ldr	r2, [pc, #36]	; (800030c <GPIO_PeriClockControl+0x50>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d105      	bne.n	80002f8 <GPIO_PeriClockControl+0x3c>
			GPIOD_PLCK_EN();
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <GPIO_PeriClockControl+0x4c>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f0:	4a05      	ldr	r2, [pc, #20]	; (8000308 <GPIO_PeriClockControl+0x4c>)
 80002f2:	f043 0308 	orr.w	r3, r3, #8
 80002f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	40020000 	.word	0x40020000
 8000308:	40023800 	.word	0x40023800
 800030c:	40020c00 	.word	0x40020c00

08000310 <GPIO_Init>:
/*
 * Init and De-init
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
	//1. Configure the mode of GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	2b03      	cmp	r3, #3
 8000322:	d81f      	bhi.n	8000364 <GPIO_Init+0x54>
	{/*Start of: If the mode is less than analog , then it is non interrupt mode*/
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	795b      	ldrb	r3, [r3, #5]
 8000328:	461a      	mov	r2, r3
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	791b      	ldrb	r3, [r3, #4]
 800032e:	005b      	lsls	r3, r3, #1
 8000330:	fa02 f303 	lsl.w	r3, r2, r3
 8000334:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	791b      	ldrb	r3, [r3, #4]
 8000340:	4619      	mov	r1, r3
 8000342:	2303      	movs	r3, #3
 8000344:	408b      	lsls	r3, r1
 8000346:	43db      	mvns	r3, r3
 8000348:	4619      	mov	r1, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	400a      	ands	r2, r1
 8000350:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	6819      	ldr	r1, [r3, #0]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	68fa      	ldr	r2, [r7, #12]
 800035e:	430a      	orrs	r2, r1
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	e062      	b.n	800042a <GPIO_Init+0x11a>
	}/*End of: The mode is less than analog , non interrupt is configured*/
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	795b      	ldrb	r3, [r3, #5]
 8000368:	2b04      	cmp	r3, #4
 800036a:	d117      	bne.n	800039c <GPIO_Init+0x8c>
		{
			//1.Configure FTSR
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800036c:	4b81      	ldr	r3, [pc, #516]	; (8000574 <GPIO_Init+0x264>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	7912      	ldrb	r2, [r2, #4]
 8000374:	4611      	mov	r1, r2
 8000376:	2201      	movs	r2, #1
 8000378:	408a      	lsls	r2, r1
 800037a:	4611      	mov	r1, r2
 800037c:	4a7d      	ldr	r2, [pc, #500]	; (8000574 <GPIO_Init+0x264>)
 800037e:	430b      	orrs	r3, r1
 8000380:	60d3      	str	r3, [r2, #12]

			//Clear corresponding RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000382:	4b7c      	ldr	r3, [pc, #496]	; (8000574 <GPIO_Init+0x264>)
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	7912      	ldrb	r2, [r2, #4]
 800038a:	4611      	mov	r1, r2
 800038c:	2201      	movs	r2, #1
 800038e:	408a      	lsls	r2, r1
 8000390:	43d2      	mvns	r2, r2
 8000392:	4611      	mov	r1, r2
 8000394:	4a77      	ldr	r2, [pc, #476]	; (8000574 <GPIO_Init+0x264>)
 8000396:	400b      	ands	r3, r1
 8000398:	6093      	str	r3, [r2, #8]
 800039a:	e035      	b.n	8000408 <GPIO_Init+0xf8>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RI)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	795b      	ldrb	r3, [r3, #5]
 80003a0:	2b05      	cmp	r3, #5
 80003a2:	d117      	bne.n	80003d4 <GPIO_Init+0xc4>
		{
			//1.COnfigure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003a4:	4b73      	ldr	r3, [pc, #460]	; (8000574 <GPIO_Init+0x264>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	7912      	ldrb	r2, [r2, #4]
 80003ac:	4611      	mov	r1, r2
 80003ae:	2201      	movs	r2, #1
 80003b0:	408a      	lsls	r2, r1
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a6f      	ldr	r2, [pc, #444]	; (8000574 <GPIO_Init+0x264>)
 80003b6:	430b      	orrs	r3, r1
 80003b8:	6093      	str	r3, [r2, #8]

			//Clear corresponding FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ba:	4b6e      	ldr	r3, [pc, #440]	; (8000574 <GPIO_Init+0x264>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	7912      	ldrb	r2, [r2, #4]
 80003c2:	4611      	mov	r1, r2
 80003c4:	2201      	movs	r2, #1
 80003c6:	408a      	lsls	r2, r1
 80003c8:	43d2      	mvns	r2, r2
 80003ca:	4611      	mov	r1, r2
 80003cc:	4a69      	ldr	r2, [pc, #420]	; (8000574 <GPIO_Init+0x264>)
 80003ce:	400b      	ands	r3, r1
 80003d0:	60d3      	str	r3, [r2, #12]
 80003d2:	e019      	b.n	8000408 <GPIO_Init+0xf8>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	2b06      	cmp	r3, #6
 80003da:	d115      	bne.n	8000408 <GPIO_Init+0xf8>
		{
			//1.COnfigure the RTSR and FTSR

			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003dc:	4b65      	ldr	r3, [pc, #404]	; (8000574 <GPIO_Init+0x264>)
 80003de:	689b      	ldr	r3, [r3, #8]
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	7912      	ldrb	r2, [r2, #4]
 80003e4:	4611      	mov	r1, r2
 80003e6:	2201      	movs	r2, #1
 80003e8:	408a      	lsls	r2, r1
 80003ea:	4611      	mov	r1, r2
 80003ec:	4a61      	ldr	r2, [pc, #388]	; (8000574 <GPIO_Init+0x264>)
 80003ee:	430b      	orrs	r3, r1
 80003f0:	6093      	str	r3, [r2, #8]

			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003f2:	4b60      	ldr	r3, [pc, #384]	; (8000574 <GPIO_Init+0x264>)
 80003f4:	68db      	ldr	r3, [r3, #12]
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	7912      	ldrb	r2, [r2, #4]
 80003fa:	4611      	mov	r1, r2
 80003fc:	2201      	movs	r2, #1
 80003fe:	408a      	lsls	r2, r1
 8000400:	4611      	mov	r1, r2
 8000402:	4a5c      	ldr	r2, [pc, #368]	; (8000574 <GPIO_Init+0x264>)
 8000404:	430b      	orrs	r3, r1
 8000406:	60d3      	str	r3, [r2, #12]

		//uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
		//uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
		//uint8_t portcode = GPIO_BASEADD_TO_CODE(pGPIOHandle->pGPIOx);

		SYSCFG_PLCK_EN();
 8000408:	4b5b      	ldr	r3, [pc, #364]	; (8000578 <GPIO_Init+0x268>)
 800040a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800040c:	4a5a      	ldr	r2, [pc, #360]	; (8000578 <GPIO_Init+0x268>)
 800040e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000412:	6453      	str	r3, [r2, #68]	; 0x44

		//SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);


		//3. Enable the exti interrupt delivery using IMR(Interrupt mask register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000414:	4b57      	ldr	r3, [pc, #348]	; (8000574 <GPIO_Init+0x264>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	7912      	ldrb	r2, [r2, #4]
 800041c:	4611      	mov	r1, r2
 800041e:	2201      	movs	r2, #1
 8000420:	408a      	lsls	r2, r1
 8000422:	4611      	mov	r1, r2
 8000424:	4a53      	ldr	r2, [pc, #332]	; (8000574 <GPIO_Init+0x264>)
 8000426:	430b      	orrs	r3, r1
 8000428:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	799b      	ldrb	r3, [r3, #6]
 8000432:	461a      	mov	r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	791b      	ldrb	r3, [r3, #4]
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	fa02 f303 	lsl.w	r3, r2, r3
 800043e:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	689a      	ldr	r2, [r3, #8]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	4619      	mov	r1, r3
 800044c:	2303      	movs	r3, #3
 800044e:	408b      	lsls	r3, r1
 8000450:	43db      	mvns	r3, r3
 8000452:	4619      	mov	r1, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	400a      	ands	r2, r1
 800045a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6899      	ldr	r1, [r3, #8]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	430a      	orrs	r2, r1
 800046a:	609a      	str	r2, [r3, #8]

	temp = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
	//3. Configure pull up pull down resistor

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	79db      	ldrb	r3, [r3, #7]
 8000474:	461a      	mov	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	791b      	ldrb	r3, [r3, #4]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	fa02 f303 	lsl.w	r3, r2, r3
 8000480:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	68da      	ldr	r2, [r3, #12]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	791b      	ldrb	r3, [r3, #4]
 800048c:	4619      	mov	r1, r3
 800048e:	2303      	movs	r3, #3
 8000490:	408b      	lsls	r3, r1
 8000492:	43db      	mvns	r3, r3
 8000494:	4619      	mov	r1, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	400a      	ands	r2, r1
 800049c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	68d9      	ldr	r1, [r3, #12]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	430a      	orrs	r2, r1
 80004ac:	60da      	str	r2, [r3, #12]

	temp = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
	//4. Configure output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	7a1b      	ldrb	r3, [r3, #8]
 80004b6:	461a      	mov	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	791b      	ldrb	r3, [r3, #4]
 80004bc:	fa02 f303 	lsl.w	r3, r2, r3
 80004c0:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	685a      	ldr	r2, [r3, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	791b      	ldrb	r3, [r3, #4]
 80004cc:	4619      	mov	r1, r3
 80004ce:	2301      	movs	r3, #1
 80004d0:	408b      	lsls	r3, r1
 80004d2:	43db      	mvns	r3, r3
 80004d4:	4619      	mov	r1, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	400a      	ands	r2, r1
 80004dc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6859      	ldr	r1, [r3, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	430a      	orrs	r2, r1
 80004ec:	605a      	str	r2, [r3, #4]

	temp = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
	//5. Configure alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	795b      	ldrb	r3, [r3, #5]
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d135      	bne.n	8000566 <GPIO_Init+0x256>
	{
		// configure alternate functionality register
		uint8_t temp1, temp2;
		// Decide alternate high or low register, divide by 8
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	08db      	lsrs	r3, r3, #3
 8000500:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	f003 0307 	and.w	r3, r3, #7
 800050a:	72bb      	strb	r3, [r7, #10]
		pGPIOHandle->pGPIOx->AFRL[temp1] &= ~(0xF << (4 * temp2)); //clearing
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	7afb      	ldrb	r3, [r7, #11]
 8000512:	3308      	adds	r3, #8
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4413      	add	r3, r2
 8000518:	685a      	ldr	r2, [r3, #4]
 800051a:	7abb      	ldrb	r3, [r7, #10]
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	210f      	movs	r1, #15
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	43db      	mvns	r3, r3
 8000526:	4618      	mov	r0, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6819      	ldr	r1, [r3, #0]
 800052c:	7afb      	ldrb	r3, [r7, #11]
 800052e:	4002      	ands	r2, r0
 8000530:	3308      	adds	r3, #8
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	440b      	add	r3, r1
 8000536:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->AFRL[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	7afb      	ldrb	r3, [r7, #11]
 800053e:	3308      	adds	r3, #8
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	4413      	add	r3, r2
 8000544:	685a      	ldr	r2, [r3, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	7a5b      	ldrb	r3, [r3, #9]
 800054a:	4619      	mov	r1, r3
 800054c:	7abb      	ldrb	r3, [r7, #10]
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	fa01 f303 	lsl.w	r3, r1, r3
 8000554:	4618      	mov	r0, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6819      	ldr	r1, [r3, #0]
 800055a:	7afb      	ldrb	r3, [r7, #11]
 800055c:	4302      	orrs	r2, r0
 800055e:	3308      	adds	r3, #8
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	440b      	add	r3, r1
 8000564:	605a      	str	r2, [r3, #4]
	}

}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40013c00 	.word	0x40013c00
 8000578:	40023800 	.word	0x40023800

0800057c <GPIO_ToggleOutputPin>:

	pGPIOx->ODR = Value;

}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	78fa      	ldrb	r2, [r7, #3]
 800058e:	2101      	movs	r1, #1
 8000590:	fa01 f202 	lsl.w	r2, r1, r2
 8000594:	405a      	eors	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	615a      	str	r2, [r3, #20]

}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
	...

080005a8 <GPIO_IRQITConfig>:

/*
 * IRQ Configuration and LSR handling
 */
void GPIO_IRQITConfig(uint8_t IRQNumber, uint8_t EnDi)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	460a      	mov	r2, r1
 80005b2:	71fb      	strb	r3, [r7, #7]
 80005b4:	4613      	mov	r3, r2
 80005b6:	71bb      	strb	r3, [r7, #6]
	if(ENABLE == EnDi)
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d167      	bne.n	800068e <GPIO_IRQITConfig+0xe6>
	{
		if(IRQNumber <= 31)
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b1f      	cmp	r3, #31
 80005c2:	d80a      	bhi.n	80005da <GPIO_IRQITConfig+0x32>
		{
			//program ISER0 register
			(*NVIC_ISER0) |= (1 << IRQNumber);
 80005c4:	4b35      	ldr	r3, [pc, #212]	; (800069c <GPIO_IRQITConfig+0xf4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	79fa      	ldrb	r2, [r7, #7]
 80005ca:	2101      	movs	r1, #1
 80005cc:	fa01 f202 	lsl.w	r2, r1, r2
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a32      	ldr	r2, [pc, #200]	; (800069c <GPIO_IRQITConfig+0xf4>)
 80005d4:	430b      	orrs	r3, r1
 80005d6:	6013      	str	r3, [r2, #0]

		}

	}

}
 80005d8:	e059      	b.n	800068e <GPIO_IRQITConfig+0xe6>
		else if(IRQNumber > 31 &&  IRQNumber < 64)
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b1f      	cmp	r3, #31
 80005de:	d90f      	bls.n	8000600 <GPIO_IRQITConfig+0x58>
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b3f      	cmp	r3, #63	; 0x3f
 80005e4:	d80c      	bhi.n	8000600 <GPIO_IRQITConfig+0x58>
			(*NVIC_ISER1) |= (1 << (IRQNumber %32));
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <GPIO_IRQITConfig+0xf8>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	79fa      	ldrb	r2, [r7, #7]
 80005ec:	f002 021f 	and.w	r2, r2, #31
 80005f0:	2101      	movs	r1, #1
 80005f2:	fa01 f202 	lsl.w	r2, r1, r2
 80005f6:	4611      	mov	r1, r2
 80005f8:	4a29      	ldr	r2, [pc, #164]	; (80006a0 <GPIO_IRQITConfig+0xf8>)
 80005fa:	430b      	orrs	r3, r1
 80005fc:	6013      	str	r3, [r2, #0]
 80005fe:	e046      	b.n	800068e <GPIO_IRQITConfig+0xe6>
		else if(IRQNumber >= 64 &&  IRQNumber < 96)
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	2b3f      	cmp	r3, #63	; 0x3f
 8000604:	d90f      	bls.n	8000626 <GPIO_IRQITConfig+0x7e>
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2b5f      	cmp	r3, #95	; 0x5f
 800060a:	d80c      	bhi.n	8000626 <GPIO_IRQITConfig+0x7e>
			(*NVIC_ISER2) |= 1 << (IRQNumber %64);
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <GPIO_IRQITConfig+0xfc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	79fa      	ldrb	r2, [r7, #7]
 8000612:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000616:	2101      	movs	r1, #1
 8000618:	fa01 f202 	lsl.w	r2, r1, r2
 800061c:	4611      	mov	r1, r2
 800061e:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <GPIO_IRQITConfig+0xfc>)
 8000620:	430b      	orrs	r3, r1
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	e033      	b.n	800068e <GPIO_IRQITConfig+0xe6>
			if(IRQNumber <= 31)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b1f      	cmp	r3, #31
 800062a:	d80a      	bhi.n	8000642 <GPIO_IRQITConfig+0x9a>
				(*NVIC_ICER0) |= 1 << IRQNumber;
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <GPIO_IRQITConfig+0x100>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	79fa      	ldrb	r2, [r7, #7]
 8000632:	2101      	movs	r1, #1
 8000634:	fa01 f202 	lsl.w	r2, r1, r2
 8000638:	4611      	mov	r1, r2
 800063a:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <GPIO_IRQITConfig+0x100>)
 800063c:	430b      	orrs	r3, r1
 800063e:	6013      	str	r3, [r2, #0]
}
 8000640:	e025      	b.n	800068e <GPIO_IRQITConfig+0xe6>
			else if(IRQNumber > 31 &&  IRQNumber < 64)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b1f      	cmp	r3, #31
 8000646:	d90f      	bls.n	8000668 <GPIO_IRQITConfig+0xc0>
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b3f      	cmp	r3, #63	; 0x3f
 800064c:	d80c      	bhi.n	8000668 <GPIO_IRQITConfig+0xc0>
				(*NVIC_ICER1) |= 1 << (IRQNumber %32);
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <GPIO_IRQITConfig+0x104>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	f002 021f 	and.w	r2, r2, #31
 8000658:	2101      	movs	r1, #1
 800065a:	fa01 f202 	lsl.w	r2, r1, r2
 800065e:	4611      	mov	r1, r2
 8000660:	4a12      	ldr	r2, [pc, #72]	; (80006ac <GPIO_IRQITConfig+0x104>)
 8000662:	430b      	orrs	r3, r1
 8000664:	6013      	str	r3, [r2, #0]
 8000666:	e012      	b.n	800068e <GPIO_IRQITConfig+0xe6>
			else if(IRQNumber >= 64 &&  IRQNumber < 96)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2b3f      	cmp	r3, #63	; 0x3f
 800066c:	d90f      	bls.n	800068e <GPIO_IRQITConfig+0xe6>
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b5f      	cmp	r3, #95	; 0x5f
 8000672:	d80c      	bhi.n	800068e <GPIO_IRQITConfig+0xe6>
				(*NVIC_ICER2) |= 1 << (IRQNumber %64);
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <GPIO_IRQITConfig+0x108>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	79fa      	ldrb	r2, [r7, #7]
 800067a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800067e:	2101      	movs	r1, #1
 8000680:	fa01 f202 	lsl.w	r2, r1, r2
 8000684:	4611      	mov	r1, r2
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <GPIO_IRQITConfig+0x108>)
 8000688:	430b      	orrs	r3, r1
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	e7ff      	b.n	800068e <GPIO_IRQITConfig+0xe6>
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e100 	.word	0xe000e100
 80006a0:	e000e104 	.word	0xe000e104
 80006a4:	e000e108 	.word	0xe000e108
 80006a8:	e000e180 	.word	0xe000e180
 80006ac:	e000e184 	.word	0xe000e184
 80006b0:	e000e188 	.word	0xe000e188

080006b4 <GPIO_IRQHandling>:
	*(NVIC_PR_BASE_ADDR + iprx * 4) |= ( IRQPriority << shift_amount);

}

void GPIO_IRQHandling(uint8_t PinNumber)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pn number
	if(EXTI->PR & (1 << PinNumber))
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <GPIO_IRQHandling+0x3c>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	2101      	movs	r1, #1
 80006c6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ca:	4013      	ands	r3, r2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d009      	beq.n	80006e4 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= (1 << PinNumber);
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <GPIO_IRQHandling+0x3c>)
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	79fa      	ldrb	r2, [r7, #7]
 80006d6:	2101      	movs	r1, #1
 80006d8:	fa01 f202 	lsl.w	r2, r1, r2
 80006dc:	4611      	mov	r1, r2
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <GPIO_IRQHandling+0x3c>)
 80006e0:	430b      	orrs	r3, r1
 80006e2:	6153      	str	r3, [r2, #20]
	}

}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	40013c00 	.word	0x40013c00

080006f4 <__libc_init_array>:
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	4d0d      	ldr	r5, [pc, #52]	; (800072c <__libc_init_array+0x38>)
 80006f8:	4c0d      	ldr	r4, [pc, #52]	; (8000730 <__libc_init_array+0x3c>)
 80006fa:	1b64      	subs	r4, r4, r5
 80006fc:	10a4      	asrs	r4, r4, #2
 80006fe:	2600      	movs	r6, #0
 8000700:	42a6      	cmp	r6, r4
 8000702:	d109      	bne.n	8000718 <__libc_init_array+0x24>
 8000704:	4d0b      	ldr	r5, [pc, #44]	; (8000734 <__libc_init_array+0x40>)
 8000706:	4c0c      	ldr	r4, [pc, #48]	; (8000738 <__libc_init_array+0x44>)
 8000708:	f000 f818 	bl	800073c <_init>
 800070c:	1b64      	subs	r4, r4, r5
 800070e:	10a4      	asrs	r4, r4, #2
 8000710:	2600      	movs	r6, #0
 8000712:	42a6      	cmp	r6, r4
 8000714:	d105      	bne.n	8000722 <__libc_init_array+0x2e>
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f855 3b04 	ldr.w	r3, [r5], #4
 800071c:	4798      	blx	r3
 800071e:	3601      	adds	r6, #1
 8000720:	e7ee      	b.n	8000700 <__libc_init_array+0xc>
 8000722:	f855 3b04 	ldr.w	r3, [r5], #4
 8000726:	4798      	blx	r3
 8000728:	3601      	adds	r6, #1
 800072a:	e7f2      	b.n	8000712 <__libc_init_array+0x1e>
 800072c:	08000754 	.word	0x08000754
 8000730:	08000754 	.word	0x08000754
 8000734:	08000754 	.word	0x08000754
 8000738:	08000758 	.word	0x08000758

0800073c <_init>:
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	bf00      	nop
 8000740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000742:	bc08      	pop	{r3}
 8000744:	469e      	mov	lr, r3
 8000746:	4770      	bx	lr

08000748 <_fini>:
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074a:	bf00      	nop
 800074c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074e:	bc08      	pop	{r3}
 8000750:	469e      	mov	lr, r3
 8000752:	4770      	bx	lr
