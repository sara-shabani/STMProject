
stm32f407xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006a0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000848  08000848  00010848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000854  08000854  0001085c  2**0
                  CONTENTS
  4 .ARM          00000000  08000854  08000854  0001085c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000854  0800085c  0001085c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000854  08000854  00010854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000858  08000858  00010858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001085c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001085c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001085c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001964  00000000  00000000  0001088c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000049f  00000000  00000000  000121f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  00012690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f0  00000000  00000000  000127b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002216  00000000  00000000  000128a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001335  00000000  00000000  00014abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008811  00000000  00000000  00015df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001e604  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003e4  00000000  00000000  0001e658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000830 	.word	0x08000830

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000830 	.word	0x08000830

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <main>:
 * ALT function mode : 5

 */

int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b08a      	sub	sp, #40	; 0x28
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001fe:	4b25      	ldr	r3, [pc, #148]	; (8000294 <main+0x9c>)
 8000200:	61fb      	str	r3, [r7, #28]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000202:	2302      	movs	r3, #2
 8000204:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000208:	2305      	movs	r3, #5
 800020a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800020e:	2300      	movs	r3, #0
 8000210:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
 8000214:	2300      	movs	r3, #0
 8000216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23


	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_13;
 800021a:	230d      	movs	r3, #13
 800021c:	f887 3020 	strb.w	r3, [r7, #32]
	GPIO_Init(&SPIPins);
 8000220:	f107 031c 	add.w	r3, r7, #28
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f89d 	bl	8000364 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_15;
 800022a:	230f      	movs	r3, #15
 800022c:	f887 3020 	strb.w	r3, [r7, #32]
	GPIO_Init(&SPIPins);
 8000230:	f107 031c 	add.w	r3, r7, #28
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f895 	bl	8000364 <GPIO_Init>

	///////////////////////////////////////////////////////////////////

	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 800023a:	4b17      	ldr	r3, [pc, #92]	; (8000298 <main+0xa0>)
 800023c:	613b      	str	r3, [r7, #16]
	SPI2Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800023e:	2301      	movs	r3, #1
 8000240:	757b      	strb	r3, [r7, #21]
	SPI2Handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000242:	2301      	movs	r3, #1
 8000244:	753b      	strb	r3, [r7, #20]
	SPI2Handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; //8 MHz
 8000246:	2300      	movs	r3, #0
 8000248:	75bb      	strb	r3, [r7, #22]
	SPI2Handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 800024a:	2300      	movs	r3, #0
 800024c:	75fb      	strb	r3, [r7, #23]
	SPI2Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 800024e:	2300      	movs	r3, #0
 8000250:	763b      	strb	r3, [r7, #24]
	SPI2Handle.SPI_Config.SPI_CPHA = SPI_CPOL_LOW;
 8000252:	2300      	movs	r3, #0
 8000254:	767b      	strb	r3, [r7, #25]
	SPI2Handle.SPI_Config.SPI_SSM = SPI_SSM_EN; // Software slave management enable
 8000256:	2301      	movs	r3, #1
 8000258:	76bb      	strb	r3, [r7, #26]



	SPI_Init(&SPI2Handle);
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	4618      	mov	r0, r3
 8000260:	f000 f9e4 	bl	800062c <SPI_Init>

	// This makes NSS signal internally high and avoids MODF error

	SPI_SSIConfig(SPI2, ENABLE);
 8000264:	2101      	movs	r1, #1
 8000266:	480c      	ldr	r0, [pc, #48]	; (8000298 <main+0xa0>)
 8000268:	f000 faa2 	bl	80007b0 <SPI_SSIConfig>


	char userData[] = "Hello_world";
 800026c:	4a0b      	ldr	r2, [pc, #44]	; (800029c <main+0xa4>)
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	ca07      	ldmia	r2, {r0, r1, r2}
 8000272:	e883 0007 	stmia.w	r3, {r0, r1, r2}


	SPI_PheripheralControl(SPI2, ENABLE);
 8000276:	2101      	movs	r1, #1
 8000278:	4807      	ldr	r0, [pc, #28]	; (8000298 <main+0xa0>)
 800027a:	f000 fa7d 	bl	8000778 <SPI_PheripheralControl>



	SPI_sendData(SPI2, (uint8_t*)userData, strlen(userData));
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ffb1 	bl	80001e8 <strlen>
 8000286:	4602      	mov	r2, r0
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	4802      	ldr	r0, [pc, #8]	; (8000298 <main+0xa0>)
 800028e:	f000 fa3c 	bl	800070a <SPI_sendData>

	while(1);
 8000292:	e7fe      	b.n	8000292 <main+0x9a>
 8000294:	40020400 	.word	0x40020400
 8000298:	40003800 	.word	0x40003800
 800029c:	08000848 	.word	0x08000848

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	; (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	; (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 fa8b 	bl	80007e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d2:	f7ff ff91 	bl	80001f8 <main>

080002d6 <LoopForever>:

LoopForever:
    b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	0800085c 	.word	0x0800085c
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	2000001c 	.word	0x2000001c

080002f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC_IRQHandler>
	...

080002f4 <GPIO_PeriClockControl>:
 *
 * @Note				- none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENDi)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
	if ( ENABLE == ENDi)
 8000300:	78fb      	ldrb	r3, [r7, #3]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d11f      	bne.n	8000346 <GPIO_PeriClockControl+0x52>
	{
		if ( GPIOA == pGPIOx)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a12      	ldr	r2, [pc, #72]	; (8000354 <GPIO_PeriClockControl+0x60>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d106      	bne.n	800031c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PLCK_EN();
 800030e:	4b12      	ldr	r3, [pc, #72]	; (8000358 <GPIO_PeriClockControl+0x64>)
 8000310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000312:	4a11      	ldr	r2, [pc, #68]	; (8000358 <GPIO_PeriClockControl+0x64>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6313      	str	r3, [r2, #48]	; 0x30
			//GPIOA_PLCK_DI();
		}

	}

}
 800031a:	e014      	b.n	8000346 <GPIO_PeriClockControl+0x52>
		else if (GPIOD == pGPIOx)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a0f      	ldr	r2, [pc, #60]	; (800035c <GPIO_PeriClockControl+0x68>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIO_PeriClockControl+0x3e>
			GPIOD_PLCK_EN();
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <GPIO_PeriClockControl+0x64>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <GPIO_PeriClockControl+0x64>)
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000330:	e009      	b.n	8000346 <GPIO_PeriClockControl+0x52>
		else if (GPIOB == pGPIOx)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <GPIO_PeriClockControl+0x6c>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d105      	bne.n	8000346 <GPIO_PeriClockControl+0x52>
			GPIOB_PLCK_EN();
 800033a:	4b07      	ldr	r3, [pc, #28]	; (8000358 <GPIO_PeriClockControl+0x64>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033e:	4a06      	ldr	r2, [pc, #24]	; (8000358 <GPIO_PeriClockControl+0x64>)
 8000340:	f043 0302 	orr.w	r3, r3, #2
 8000344:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40020000 	.word	0x40020000
 8000358:	40023800 	.word	0x40023800
 800035c:	40020c00 	.word	0x40020c00
 8000360:	40020400 	.word	0x40020400

08000364 <GPIO_Init>:
/*
 * Init and De-init
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2101      	movs	r1, #1
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ffbc 	bl	80002f4 <GPIO_PeriClockControl>

	//1. Configure the mode of GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	795b      	ldrb	r3, [r3, #5]
 8000380:	2b03      	cmp	r3, #3
 8000382:	d81f      	bhi.n	80003c4 <GPIO_Init+0x60>
	{/*Start of: If the mode is less than analog , then it is non interrupt mode*/
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	795b      	ldrb	r3, [r3, #5]
 8000388:	461a      	mov	r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	791b      	ldrb	r3, [r3, #4]
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	fa02 f303 	lsl.w	r3, r2, r3
 8000394:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	791b      	ldrb	r3, [r3, #4]
 80003a0:	4619      	mov	r1, r3
 80003a2:	2303      	movs	r3, #3
 80003a4:	408b      	lsls	r3, r1
 80003a6:	43db      	mvns	r3, r3
 80003a8:	4619      	mov	r1, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	400a      	ands	r2, r1
 80003b0:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	6819      	ldr	r1, [r3, #0]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	68fa      	ldr	r2, [r7, #12]
 80003be:	430a      	orrs	r2, r1
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	e062      	b.n	800048a <GPIO_Init+0x126>
	}/*End of: The mode is less than analog , non interrupt is configured*/
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	795b      	ldrb	r3, [r3, #5]
 80003c8:	2b04      	cmp	r3, #4
 80003ca:	d117      	bne.n	80003fc <GPIO_Init+0x98>
		{
			//1.Configure FTSR
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80003cc:	4b80      	ldr	r3, [pc, #512]	; (80005d0 <GPIO_Init+0x26c>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	7912      	ldrb	r2, [r2, #4]
 80003d4:	4611      	mov	r1, r2
 80003d6:	2201      	movs	r2, #1
 80003d8:	408a      	lsls	r2, r1
 80003da:	4611      	mov	r1, r2
 80003dc:	4a7c      	ldr	r2, [pc, #496]	; (80005d0 <GPIO_Init+0x26c>)
 80003de:	430b      	orrs	r3, r1
 80003e0:	60d3      	str	r3, [r2, #12]

			//Clear corresponding RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003e2:	4b7b      	ldr	r3, [pc, #492]	; (80005d0 <GPIO_Init+0x26c>)
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	7912      	ldrb	r2, [r2, #4]
 80003ea:	4611      	mov	r1, r2
 80003ec:	2201      	movs	r2, #1
 80003ee:	408a      	lsls	r2, r1
 80003f0:	43d2      	mvns	r2, r2
 80003f2:	4611      	mov	r1, r2
 80003f4:	4a76      	ldr	r2, [pc, #472]	; (80005d0 <GPIO_Init+0x26c>)
 80003f6:	400b      	ands	r3, r1
 80003f8:	6093      	str	r3, [r2, #8]
 80003fa:	e035      	b.n	8000468 <GPIO_Init+0x104>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RI)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	795b      	ldrb	r3, [r3, #5]
 8000400:	2b05      	cmp	r3, #5
 8000402:	d117      	bne.n	8000434 <GPIO_Init+0xd0>
		{
			//1.COnfigure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000404:	4b72      	ldr	r3, [pc, #456]	; (80005d0 <GPIO_Init+0x26c>)
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	7912      	ldrb	r2, [r2, #4]
 800040c:	4611      	mov	r1, r2
 800040e:	2201      	movs	r2, #1
 8000410:	408a      	lsls	r2, r1
 8000412:	4611      	mov	r1, r2
 8000414:	4a6e      	ldr	r2, [pc, #440]	; (80005d0 <GPIO_Init+0x26c>)
 8000416:	430b      	orrs	r3, r1
 8000418:	6093      	str	r3, [r2, #8]

			//Clear corresponding FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800041a:	4b6d      	ldr	r3, [pc, #436]	; (80005d0 <GPIO_Init+0x26c>)
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	7912      	ldrb	r2, [r2, #4]
 8000422:	4611      	mov	r1, r2
 8000424:	2201      	movs	r2, #1
 8000426:	408a      	lsls	r2, r1
 8000428:	43d2      	mvns	r2, r2
 800042a:	4611      	mov	r1, r2
 800042c:	4a68      	ldr	r2, [pc, #416]	; (80005d0 <GPIO_Init+0x26c>)
 800042e:	400b      	ands	r3, r1
 8000430:	60d3      	str	r3, [r2, #12]
 8000432:	e019      	b.n	8000468 <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	795b      	ldrb	r3, [r3, #5]
 8000438:	2b06      	cmp	r3, #6
 800043a:	d115      	bne.n	8000468 <GPIO_Init+0x104>
		{
			//1.COnfigure the RTSR and FTSR

			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800043c:	4b64      	ldr	r3, [pc, #400]	; (80005d0 <GPIO_Init+0x26c>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	7912      	ldrb	r2, [r2, #4]
 8000444:	4611      	mov	r1, r2
 8000446:	2201      	movs	r2, #1
 8000448:	408a      	lsls	r2, r1
 800044a:	4611      	mov	r1, r2
 800044c:	4a60      	ldr	r2, [pc, #384]	; (80005d0 <GPIO_Init+0x26c>)
 800044e:	430b      	orrs	r3, r1
 8000450:	6093      	str	r3, [r2, #8]

			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000452:	4b5f      	ldr	r3, [pc, #380]	; (80005d0 <GPIO_Init+0x26c>)
 8000454:	68db      	ldr	r3, [r3, #12]
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	7912      	ldrb	r2, [r2, #4]
 800045a:	4611      	mov	r1, r2
 800045c:	2201      	movs	r2, #1
 800045e:	408a      	lsls	r2, r1
 8000460:	4611      	mov	r1, r2
 8000462:	4a5b      	ldr	r2, [pc, #364]	; (80005d0 <GPIO_Init+0x26c>)
 8000464:	430b      	orrs	r3, r1
 8000466:	60d3      	str	r3, [r2, #12]

		//uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
		//uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
		//uint8_t portcode = GPIO_BASEADD_TO_CODE(pGPIOHandle->pGPIOx);

		SYSCFG_PLCK_EN();
 8000468:	4b5a      	ldr	r3, [pc, #360]	; (80005d4 <GPIO_Init+0x270>)
 800046a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800046c:	4a59      	ldr	r2, [pc, #356]	; (80005d4 <GPIO_Init+0x270>)
 800046e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000472:	6453      	str	r3, [r2, #68]	; 0x44

		//SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);


		//3. Enable the exti interrupt delivery using IMR(Interrupt mask register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000474:	4b56      	ldr	r3, [pc, #344]	; (80005d0 <GPIO_Init+0x26c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	7912      	ldrb	r2, [r2, #4]
 800047c:	4611      	mov	r1, r2
 800047e:	2201      	movs	r2, #1
 8000480:	408a      	lsls	r2, r1
 8000482:	4611      	mov	r1, r2
 8000484:	4a52      	ldr	r2, [pc, #328]	; (80005d0 <GPIO_Init+0x26c>)
 8000486:	430b      	orrs	r3, r1
 8000488:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	799b      	ldrb	r3, [r3, #6]
 8000492:	461a      	mov	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	791b      	ldrb	r3, [r3, #4]
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	fa02 f303 	lsl.w	r3, r2, r3
 800049e:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	689a      	ldr	r2, [r3, #8]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	791b      	ldrb	r3, [r3, #4]
 80004aa:	4619      	mov	r1, r3
 80004ac:	2303      	movs	r3, #3
 80004ae:	408b      	lsls	r3, r1
 80004b0:	43db      	mvns	r3, r3
 80004b2:	4619      	mov	r1, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	400a      	ands	r2, r1
 80004ba:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	6899      	ldr	r1, [r3, #8]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	430a      	orrs	r2, r1
 80004ca:	609a      	str	r2, [r3, #8]

	temp = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
	//3. Configure pull up pull down resistor

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	79db      	ldrb	r3, [r3, #7]
 80004d4:	461a      	mov	r2, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	791b      	ldrb	r3, [r3, #4]
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	fa02 f303 	lsl.w	r3, r2, r3
 80004e0:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	68da      	ldr	r2, [r3, #12]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	791b      	ldrb	r3, [r3, #4]
 80004ec:	4619      	mov	r1, r3
 80004ee:	2303      	movs	r3, #3
 80004f0:	408b      	lsls	r3, r1
 80004f2:	43db      	mvns	r3, r3
 80004f4:	4619      	mov	r1, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	400a      	ands	r2, r1
 80004fc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	68d9      	ldr	r1, [r3, #12]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	430a      	orrs	r2, r1
 800050c:	60da      	str	r2, [r3, #12]

	temp = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
	//4. Configure output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	7a1b      	ldrb	r3, [r3, #8]
 8000516:	461a      	mov	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	fa02 f303 	lsl.w	r3, r2, r3
 8000520:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	685a      	ldr	r2, [r3, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	4619      	mov	r1, r3
 800052e:	2301      	movs	r3, #1
 8000530:	408b      	lsls	r3, r1
 8000532:	43db      	mvns	r3, r3
 8000534:	4619      	mov	r1, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	400a      	ands	r2, r1
 800053c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	6859      	ldr	r1, [r3, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	430a      	orrs	r2, r1
 800054c:	605a      	str	r2, [r3, #4]

	temp = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
	//5. Configure alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	795b      	ldrb	r3, [r3, #5]
 8000556:	2b02      	cmp	r3, #2
 8000558:	d135      	bne.n	80005c6 <GPIO_Init+0x262>
	{
		// configure alternate functionality register
		uint8_t temp1, temp2;
		// Decide alternate high or low register, divide by 8
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	08db      	lsrs	r3, r3, #3
 8000560:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	f003 0307 	and.w	r3, r3, #7
 800056a:	72bb      	strb	r3, [r7, #10]
		pGPIOHandle->pGPIOx->AFRL[temp1] &= ~(0xF << (4 * temp2)); //clearing
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	7afb      	ldrb	r3, [r7, #11]
 8000572:	3308      	adds	r3, #8
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	4413      	add	r3, r2
 8000578:	685a      	ldr	r2, [r3, #4]
 800057a:	7abb      	ldrb	r3, [r7, #10]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	210f      	movs	r1, #15
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	43db      	mvns	r3, r3
 8000586:	4618      	mov	r0, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6819      	ldr	r1, [r3, #0]
 800058c:	7afb      	ldrb	r3, [r7, #11]
 800058e:	4002      	ands	r2, r0
 8000590:	3308      	adds	r3, #8
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	440b      	add	r3, r1
 8000596:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->AFRL[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	7afb      	ldrb	r3, [r7, #11]
 800059e:	3308      	adds	r3, #8
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	685a      	ldr	r2, [r3, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	7a5b      	ldrb	r3, [r3, #9]
 80005aa:	4619      	mov	r1, r3
 80005ac:	7abb      	ldrb	r3, [r7, #10]
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	fa01 f303 	lsl.w	r3, r1, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6819      	ldr	r1, [r3, #0]
 80005ba:	7afb      	ldrb	r3, [r7, #11]
 80005bc:	4302      	orrs	r2, r0
 80005be:	3308      	adds	r3, #8
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	440b      	add	r3, r1
 80005c4:	605a      	str	r2, [r3, #4]
	}

}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40013c00 	.word	0x40013c00
 80005d4:	40023800 	.word	0x40023800

080005d8 <SPI_PeriClockControl>:

#include "stm32f407xx_spi_driver.h"


void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t ENDi)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	70fb      	strb	r3, [r7, #3]

	if ( ENABLE == ENDi)
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d114      	bne.n	8000614 <SPI_PeriClockControl+0x3c>
	{
		if ( SPI1 == pSPIx)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <SPI_PeriClockControl+0x48>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d106      	bne.n	8000600 <SPI_PeriClockControl+0x28>
		{
			SPI1_PLCK_EN();
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <SPI_PeriClockControl+0x4c>)
 80005f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f6:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <SPI_PeriClockControl+0x4c>)
 80005f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005fc:	6413      	str	r3, [r2, #64]	; 0x40
			//GPIOA_PLCK_DI();
		}

	}

}
 80005fe:	e009      	b.n	8000614 <SPI_PeriClockControl+0x3c>
		else if (SPI2 == pSPIx)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a09      	ldr	r2, [pc, #36]	; (8000628 <SPI_PeriClockControl+0x50>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d105      	bne.n	8000614 <SPI_PeriClockControl+0x3c>
			SPI2_PLCK_EN();
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <SPI_PeriClockControl+0x4c>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a05      	ldr	r2, [pc, #20]	; (8000624 <SPI_PeriClockControl+0x4c>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40013000 	.word	0x40013000
 8000624:	40023800 	.word	0x40023800
 8000628:	40003800 	.word	0x40003800

0800062c <SPI_Init>:



void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2101      	movs	r1, #1
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ffcc 	bl	80005d8 <SPI_PeriClockControl>

	//1. configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]

	//1.1 configure the device mode
	tempreg |= pSPIHandle->SPI_Config.SPI_DeviceMode << 2;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	461a      	mov	r2, r3
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4313      	orrs	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]

	//2.2 configure the bus config
	if( SPI_BUS_CONFIG_FD == pSPIHandle->SPI_Config.SPI_BusConfig)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	795b      	ldrb	r3, [r3, #5]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d104      	bne.n	8000664 <SPI_Init+0x38>
	{
			//bidi mode should be cleared
			tempreg &= ~(1<< 15);
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	e014      	b.n	800068e <SPI_Init+0x62>

	}else if(SPI_BUS_CONFIG_HD == pSPIHandle->SPI_Config.SPI_BusConfig)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	795b      	ldrb	r3, [r3, #5]
 8000668:	2b02      	cmp	r3, #2
 800066a:	d104      	bne.n	8000676 <SPI_Init+0x4a>
	{
			//bidi mode should be set
			tempreg |= (1<< 15);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	e00b      	b.n	800068e <SPI_Init+0x62>

	}else if(SPI_BUS_CONFIG_SIMPLEX_RXONLY == pSPIHandle->SPI_Config.SPI_BusConfig)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	795b      	ldrb	r3, [r3, #5]
 800067a:	2b03      	cmp	r3, #3
 800067c:	d107      	bne.n	800068e <SPI_Init+0x62>
	{
		//bidi should be cleared
		//RxONLY bit must be set
		tempreg &= ~(1<< 15);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000684:	60fb      	str	r3, [r7, #12]
		tempreg |= (1<< 10);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800068c:	60fb      	str	r3, [r7, #12]
	}

   //3. configure the spi serial clock speed (baud rate)

	tempreg |= pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	799b      	ldrb	r3, [r3, #6]
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	461a      	mov	r2, r3
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	4313      	orrs	r3, r2
 800069a:	60fb      	str	r3, [r7, #12]

   //4. configure DFF

	tempreg |= pSPIHandle->SPI_Config.SPI_DFF << 11;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	79db      	ldrb	r3, [r3, #7]
 80006a0:	02db      	lsls	r3, r3, #11
 80006a2:	461a      	mov	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]


   //5. configure CPOL
	tempreg |= pSPIHandle->SPI_Config.SPI_CPOL << 1;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	7a1b      	ldrb	r3, [r3, #8]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	461a      	mov	r2, r3
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	60fb      	str	r3, [r7, #12]


  //6. configure CPHA

	tempreg |= pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	7a5b      	ldrb	r3, [r3, #9]
 80006bc:	461a      	mov	r2, r3
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7a9b      	ldrb	r3, [r3, #10]
 80006c8:	025b      	lsls	r3, r3, #9
 80006ca:	461a      	mov	r2, r3
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 = tempreg;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	601a      	str	r2, [r3, #0]



}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <SPI_GetFlagStatus>:
{


}
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & flagName)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	4013      	ands	r3, r2
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80006f8:	2301      	movs	r3, #1
 80006fa:	e000      	b.n	80006fe <SPI_GetFlagStatus+0x1c>

	}
	return FLAG_RESET;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <SPI_sendData>:



void SPI_sendData(SPI_RegDef_t *pSPIx, uint8_t* pTxBuffer, uint32_t len)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b084      	sub	sp, #16
 800070e:	af00      	add	r7, sp, #0
 8000710:	60f8      	str	r0, [r7, #12]
 8000712:	60b9      	str	r1, [r7, #8]
 8000714:	607a      	str	r2, [r7, #4]

	while(len > 0)
 8000716:	e027      	b.n	8000768 <SPI_sendData+0x5e>
	{
		//1. wait until TXEA is set
		while ( SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG ) == FLAG_RESET);
 8000718:	bf00      	nop
 800071a:	2102      	movs	r1, #2
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f7ff ffe0 	bl	80006e2 <SPI_GetFlagStatus>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0f8      	beq.n	800071a <SPI_sendData+0x10>

		//2. check the DFF bit in CR1
		if ( pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000730:	2b00      	cmp	r3, #0
 8000732:	d00e      	beq.n	8000752 <SPI_sendData+0x48>
		{
			// 16 bit DFF

			//1. Load the data in to the data register (DR)
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	60da      	str	r2, [r3, #12]
			len --;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3b01      	subs	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
			len --;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	3301      	adds	r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	e00a      	b.n	8000768 <SPI_sendData+0x5e>
		}
		else
		{
			// 8 bit DFF
			//1. Load the data in to the data register (DR)
			pSPIx->DR = *pTxBuffer;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	60da      	str	r2, [r3, #12]
			len --;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	3301      	adds	r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1d4      	bne.n	8000718 <SPI_sendData+0xe>
		}
	}

}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <SPI_PheripheralControl>:

}


void SPI_PheripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]

	if(ENABLE  == EnOrDi)
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d106      	bne.n	8000798 <SPI_PheripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000796:	e005      	b.n	80007a4 <SPI_PheripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	601a      	str	r2, [r3, #0]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <SPI_SSIConfig>:

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]

	if(ENABLE  == EnOrDi)
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d106      	bne.n	80007d0 <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}


}
 80007ce:	e005      	b.n	80007dc <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	601a      	str	r2, [r3, #0]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <__libc_init_array>:
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	4d0d      	ldr	r5, [pc, #52]	; (8000820 <__libc_init_array+0x38>)
 80007ec:	4c0d      	ldr	r4, [pc, #52]	; (8000824 <__libc_init_array+0x3c>)
 80007ee:	1b64      	subs	r4, r4, r5
 80007f0:	10a4      	asrs	r4, r4, #2
 80007f2:	2600      	movs	r6, #0
 80007f4:	42a6      	cmp	r6, r4
 80007f6:	d109      	bne.n	800080c <__libc_init_array+0x24>
 80007f8:	4d0b      	ldr	r5, [pc, #44]	; (8000828 <__libc_init_array+0x40>)
 80007fa:	4c0c      	ldr	r4, [pc, #48]	; (800082c <__libc_init_array+0x44>)
 80007fc:	f000 f818 	bl	8000830 <_init>
 8000800:	1b64      	subs	r4, r4, r5
 8000802:	10a4      	asrs	r4, r4, #2
 8000804:	2600      	movs	r6, #0
 8000806:	42a6      	cmp	r6, r4
 8000808:	d105      	bne.n	8000816 <__libc_init_array+0x2e>
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000810:	4798      	blx	r3
 8000812:	3601      	adds	r6, #1
 8000814:	e7ee      	b.n	80007f4 <__libc_init_array+0xc>
 8000816:	f855 3b04 	ldr.w	r3, [r5], #4
 800081a:	4798      	blx	r3
 800081c:	3601      	adds	r6, #1
 800081e:	e7f2      	b.n	8000806 <__libc_init_array+0x1e>
 8000820:	08000854 	.word	0x08000854
 8000824:	08000854 	.word	0x08000854
 8000828:	08000854 	.word	0x08000854
 800082c:	08000858 	.word	0x08000858

08000830 <_init>:
 8000830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000832:	bf00      	nop
 8000834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000836:	bc08      	pop	{r3}
 8000838:	469e      	mov	lr, r3
 800083a:	4770      	bx	lr

0800083c <_fini>:
 800083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083e:	bf00      	nop
 8000840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000842:	bc08      	pop	{r3}
 8000844:	469e      	mov	lr, r3
 8000846:	4770      	bx	lr
